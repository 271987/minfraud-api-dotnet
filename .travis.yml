---
language: generic

addons:
  apt:
    packages:
    - gettext
    - libcurl4-openssl-dev
    - libicu-dev
    - libssl-dev
    - libunwind8
    - zlib1g

env:
  global:
    - MAXMIND_TEST_BASE_DIR=MaxMind.MinFraud.UnitTest

matrix:
  include:
    - os: linux
      dist: trusty # Ubuntu 14.04
      sudo: required
      env: CONFIGURATION=Debug
    - os: linux
      dist: trusty
      sudo: required
      env: CONFIGURATION=Release
    - os: osx
      osx_image: xcode7.2 # macOS 10.11
      env: CONFIGURATION=Debug
    - os: osx
      osx_image: xcode7.2
      env: CONFIGURATION=Release

before_install:
  # Install OpenSSL
  # Also set download URLs obtained from https://www.microsoft.com/net/download#core
  - if test "$TRAVIS_OS_NAME" == "osx"; then
      brew install openssl;
      brew link --force openssl;
      export DOTNET_SDK_URL="https://go.microsoft.com/fwlink/?LinkID=809128";
    else
      export DOTNET_SDK_URL="https://go.microsoft.com/fwlink/?LinkID=809129";
    fi

  - export DOTNET_INSTALL_DIR="$PWD/.dotnetcli"

  # Install .NET CLI
  - mkdir $DOTNET_INSTALL_DIR
  - curl -L $DOTNET_SDK_URL -o dotnet_package
  - tar -xvzf dotnet_package -C $DOTNET_INSTALL_DIR

  # Add dotnet to PATH
  - export PATH="$DOTNET_INSTALL_DIR:$PATH"

  # Update submodules
  - git submodule update --init --recursive

install:
  # Display dotnet version info
  - which dotnet;
    if [ $? -eq 0 ]; then
      echo "Using dotnet:";
      dotnet --info;
    else
      echo "dotnet.exe not found"
      exit 1;
    fi

  # Restore Packages
  - dotnet restore

  # Build Projects
  - dotnet build -c $CONFIGURATION -f netstandard1.4 ./MaxMind.MinFraud
  - dotnet build -c $CONFIGURATION -f netcoreapp1.0 ./MaxMind.MinFraud.UnitTest

script:
  # Run Unit Tests
  - dotnet test -f netcoreapp1.0 -c $CONFIGURATION MaxMind.MinFraud.UnitTest

notifications:
  email:
    on_failure: always
    on_success: change
    recipients:
      - dev-ci@maxmind.com
  slack:
    rooms:
      secure: "dFCtv/ne1uzIx8KwSpcEf72IXGeJi7yp9YkM5N3syiXG2XdZqmpDKXUW3pumsup8aU2rypq22AAPdtfHnJCERMhsi6/XUeR4ia7pezJPN0+YS2L594cvNma8emsn9sXHbYpgPpF5O6yVcyoTfWDXl84Cel+kDz91t3rRpE0PwXvxoK/DlUOJZSynEMXRXplbiH+Cs/nOlJkMBrbym8Iq3whjeMUxYFuTbYUk8ta9XoIjx594RmozAAnM3R07UKJpaUknEoNXkkLi/FvYUeXNsqv+MV7vmDcZOqyCFUktA6JSJB64puwF7uJwBOQc5/LkKlG25C+KU//tYqXXHMyAhje3trAUPQJMZ5EsVKU9i72knIO/A6+lFlGbHzGrzVNiE0aahqrcAy+ndT6PQTI1zuP/2P1S8cz+yhZGl3BLwfj/7zhKmR8TWuTvRWutGXZFciyzKXeoC1xQAr88phE22mBsZD3X2gu8olaKHct2sGnZk1n4yEQkiU2mP8aCs0FYmIJw2CAmZ2HCsCFy/XTXqQ+1ooqTgSx5jH+yn/UgyhIjrOWR/QCpCHzhuXaJwCuxJsRVONSI+i0StAYSU9QAiv2AaD1Ejfi40r4G3au9/B8GzmlpXNwe1QqwmRnGeGCDG2I1Ad1Vpo3psTWxAcHb/annk9FegZcuWOP2toCLTMI=\n"
